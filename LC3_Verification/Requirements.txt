Project Requirements: 
In Class Students: This project requires you to build a fully functional Scoreboard to test the functionality for each of the 6 blocks of the DUT. Moreover, you will also have to write coverage bins checking for functional coverage and verifying that all the blocks of the DUT have been exercised at least once. We expect you to write randomized as well as directed tests to ensure coverage is complete. At the end of the project, you will have to submit a report describing your coverage strategy and DEMO the bug-finding skills of your testbench. Note that the DEMO will be individual and not in groups. Moreover, the bug given to you can be from any block of the DUT. Thus, everyone is expected to understand all the blocks of the DUT completely. 


DE Students: Since you will be doing the project individually, we expect you to build the Scoreboard for only the Execute and Controller block of the DUT. To test your functional verification testbench, we will provide you with a few bugs in these two blocks which you will have to find and report back to us via email. This will be the DEMO for your project. It is also expected that you write coverage bins for these two blocks and submit a coverage report describing your coverage strategy. This will be the Coverage part of the project. 

Getting Started:
1) To begin with, I am hoping everyone has got a chance to read the Project Design Spec document describing the LC3 microcontroller which is the DUT. The first part of the document describes the LC3 instruction set that you will be using to exercise the DUT. The LC3 contains 6 blocks which are: Fetch, Decode, Execute, Writeback, MemAcess, and Controller. The second part of the document describes all the internal signals for each block in detail. Before you get started, we hope you go through this document.

2) We expect you to get started on building the functional verification testbench first.  Then you can start coding other modules needed to run your simulation ( Generator, Driver, Checkers, interfaces, coverage files ... ) 

Generator: For exercising the DUT, you are only allowed to send in signals from the Top Level of the DUT. Please do not try to send in signals to the individuals blocks separately. All the signals that are input to each of the 6 blocks are generated internally as outputs from other blocks. The only exception is the input signals at the top level of the LC3, i.e. Instr_dout, complete_instr, complete_insr, Data_dout. Moreover, it is fine to keep complete_data as tied to 1 all the time. As you will see, this means that data is always available on the Data_dout line when required by the DUT. 

Scoreboard: To make your task easier and build a clean testbench, we would suggest you build check functions for each block separately as a different function. In the checker, you can probe the internal signals that are input to a particular block and use them to generate the check signals to compare against the output signals for that block. This approach means that you do not have to worry about designing the pipeline yourself and worry about the timing of signals propagating within your testbench. Note: Over here, we only want you to probe the internal signals. As I said, you are not allowed to modify these signals in any way. 

3) Do's and Dont's: 
a) You will see from the design document that some of the Memory and Control Instructions are very complex in nature. In this project, we expect you to send in only one Memory or Control Signal at a time. Please avoid sending in multiple Control or Memory instructions in sequence. 
b) Please avoid sending in invalid inputs to the DUT and checking for unintended behavior. We only expect you to design your Checker for valid inputs to be sent into the DUT. 
